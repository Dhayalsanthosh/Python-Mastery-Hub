[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "python-mastery-hub"
version = "1.0.0"
description = "A comprehensive, production-ready Python learning platform with interactive exercises, web interface, and CLI tools"
authors = ["Your Name <your.email@example.com>"]
maintainers = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/yourusername/python-mastery-hub"
repository = "https://github.com/yourusername/python-mastery-hub"
documentation = "https://python-mastery-hub.readthedocs.io"
keywords = [
    "python", 
    "learning", 
    "education", 
    "programming", 
    "tutorial", 
    "interactive", 
    "exercises",
    "web-development",
    "data-science",
    "algorithms"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Education",
    "Intended Audience :: Developers",
    "Topic :: Education",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
]
packages = [{include = "python_mastery_hub", from = "src"}]
include = [
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
    "src/python_mastery_hub/web/static/**/*",
    "src/python_mastery_hub/web/templates/**/*",
]

# ==============================================================================
# MAIN DEPENDENCIES
# ==============================================================================
[tool.poetry.dependencies]
python = "^3.11"

# Web Framework & Server
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
jinja2 = "^3.1.2"
aiofiles = "^23.2.1"
python-multipart = "^0.0.6"

# Database & ORM
sqlalchemy = {extras = ["asyncio"], version = "^2.0.23"}
alembic = "^1.13.0"
asyncpg = "^0.29.0"
psycopg2-binary = "^2.9.9"

# Caching & Message Queue
redis = {extras = ["hiredis"], version = "^5.0.1"}
aioredis = "^2.0.1"
celery = "^5.3.4"

# Data Validation & Settings
pydantic = {extras = ["email"], version = "^2.5.0"}
pydantic-settings = "^2.1.0"

# CLI & User Interface
click = "^8.1.7"
rich = "^13.7.0"
typer = {extras = ["all"], version = "^0.9.0"}

# HTTP Client & Async
httpx = "^0.25.2"
aiohttp = "^3.9.0"

# Authentication & Security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
cryptography = "^41.0.0"

# Data Science Stack
numpy = "^1.25.0"
pandas = "^2.1.0"
matplotlib = "^3.8.0"
seaborn = "^0.13.0"
scikit-learn = "^1.3.0"
scipy = "^1.11.0"
plotly = "^5.17.0"

# Utilities
python-dotenv = "^1.0.0"
pyyaml = "^6.0.1"
toml = "^0.10.2"

# Optional production dependencies
gunicorn = {version = "^21.2.0", optional = true}
structlog = {version = "^23.2.0", optional = true}
sentry-sdk = {extras = ["fastapi"], version = "^1.38.0", optional = true}
prometheus-client = {version = "^0.19.0", optional = true}
boto3 = {version = "^1.34.0", optional = true}
flower = {version = "^2.0.1", optional = true}

# ==============================================================================
# DEVELOPMENT DEPENDENCIES
# ==============================================================================
[tool.poetry.group.dev.dependencies]
# Testing Framework
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
pytest-benchmark = "^4.0.0"
pytest-html = "^4.1.1"
pytest-sugar = "^0.9.7"
factory-boy = "^3.3.0"
faker = "^20.1.0"
respx = "^0.20.2"

# Code Quality & Formatting
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
flake8-docstrings = "^1.7.0"
flake8-bugbear = "^23.12.15"
flake8-comprehensions = "^3.14.0"
flake8-import-order = "^0.18.2"
mypy = "^1.7.1"
pylint = "^3.0.3"

# Security & Vulnerability Scanning
bandit = "^1.7.5"
safety = "^2.3.5"
semgrep = "^1.50.0"

# Pre-commit & Git Hooks
pre-commit = "^3.6.0"

# Documentation
sphinx = "^7.2.6"
sphinx-rtd-theme = "^1.3.0"
sphinx-autodoc-typehints = "^1.25.2"
myst-parser = "^2.0.0"
sphinx-copybutton = "^0.5.2"
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
mkdocs-mermaid2-plugin = "^1.1.1"

# Development Tools & Jupyter
jupyter = "^1.0.0"
jupyterlab = "^4.0.9"
notebook = "^7.0.6"
ipython = "^8.18.0"
ipywidgets = "^8.1.1"

# Debugging & Profiling
pdbpp = "^0.10.3"
memory-profiler = "^0.61.0"
line-profiler = "^4.1.1"
py-spy = "^0.3.14"

# Performance Testing
locust = "^2.17.0"

# Database Tools
sqlite-utils = "^3.35.2"

# Type Stubs
types-redis = "^4.6.0.11"
types-requests = "^2.31.0.10"
types-pyyaml = "^6.0.12.12"
types-toml = "^0.10.8.7"

# Coverage & Quality
interrogate = "^1.5.0"
coverage = {extras = ["toml"], version = "^7.3.2"}

# ==============================================================================
# OPTIONAL EXTRAS
# ==============================================================================
[tool.poetry.extras]
production = [
    "gunicorn", 
    "structlog", 
    "sentry-sdk", 
    "prometheus-client",
    "boto3",
    "flower"
]
monitoring = ["structlog", "sentry-sdk", "prometheus-client"]
aws = ["boto3", "botocore"]
all = [
    "gunicorn", 
    "structlog", 
    "sentry-sdk", 
    "prometheus-client", 
    "boto3",
    "flower"
]

# ==============================================================================
# CLI SCRIPTS
# ==============================================================================
[tool.poetry.scripts]
python-mastery-hub = "python_mastery_hub.cli.main:app"
pmh = "python_mastery_hub.cli.main:app"
pmh-web = "python_mastery_hub.web.main:main"
pmh-worker = "python_mastery_hub.utils.celery_worker:main"

# ==============================================================================
# BLACK CONFIGURATION
# ==============================================================================
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# ==============================================================================
# ISORT CONFIGURATION
# ==============================================================================
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["python_mastery_hub"]
known_third_party = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "alembic",
    "redis",
    "celery",
    "numpy",
    "pandas",
    "matplotlib",
    "seaborn",
    "sklearn",
    "scipy"
]
skip_glob = ["*/migrations/*", "*/alembic/versions/*"]
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
force_single_line = false

# ==============================================================================
# MYPY CONFIGURATION
# ==============================================================================
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "redis.*",
    "matplotlib.*",
    "seaborn.*",
    "sklearn.*",
    "scipy.*",
    "plotly.*"
]
ignore_missing_imports = true

# ==============================================================================
# PYTEST CONFIGURATION
# ==============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q", 
    "--strict-markers",
    "--strict-config",
    "--cov=src/python_mastery_hub",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
    "security: marks tests as security-focused",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ==============================================================================
# COVERAGE CONFIGURATION
# ==============================================================================
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/alembic/versions/*",
    "*/__init__.py",
    "*/conftest.py",
    "*/setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ==============================================================================
# BANDIT CONFIGURATION
# ==============================================================================
[tool.bandit]
exclude_dirs = ["tests", "migrations", "alembic/versions"]
skips = [
    "B101",  # assert_used
    "B601",  # paramiko_calls
    "B603",  # subprocess_without_shell_equals_true
]

# ==============================================================================
# PYLINT CONFIGURATION
# ==============================================================================
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.docparams",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.comparison_placement",
]

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "duplicate-code",
    "import-error",
    "no-member",
]

[tool.pylint.format]
max-line-length = 88
max-module-lines = 1000

[tool.pylint.design]
max-args = 8
max-locals = 15
max-returns = 6
max-branches = 12
max-statements = 50
max-parents = 7
max-attributes = 7
min-public-methods = 1
max-public-methods = 20
max-bool-expr = 5

# ==============================================================================
# INTERROGATE CONFIGURATION (Docstring Coverage)
# ==============================================================================
[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build", "tests", "migrations"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

# ==============================================================================
# RUFF CONFIGURATION (Alternative to flake8)
# ==============================================================================
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    ".mypy_cache",
    ".nox", 
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "migrations",
    "alembic/versions",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "S101"]

[tool.ruff.isort]
known-first-party = ["python_mastery_hub"]

# ==============================================================================
# SETUPTOOLS-SCM (for dynamic versioning)
# ==============================================================================
[tool.setuptools_scm]
write_to = "src/python_mastery_hub/_version.py"