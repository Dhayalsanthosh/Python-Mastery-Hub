# File: config/docker/supervisor.conf
# Supervisor configuration for process management

[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/supervisor
logfile_maxbytes=50MB
logfile_backups=10
loglevel=info

[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

# Flask application server
[program:flask_app]
command=gunicorn --config gunicorn.conf.py app:create_app()
directory=/app
user=app
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/flask_app.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
stderr_logfile=/var/log/supervisor/flask_app_error.log
stderr_logfile_maxbytes=50MB
stderr_logfile_backups=10
environment=PYTHONPATH="/app",FLASK_ENV="production"
priority=100
startsecs=10
startretries=3
stopwaitsecs=10

# Celery worker
[program:celery_worker]
command=celery -A app.celery worker --loglevel=info --concurrency=4
directory=/app
user=app
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/celery_worker.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
stderr_logfile=/var/log/supervisor/celery_worker_error.log
stderr_logfile_maxbytes=50MB
stderr_logfile_backups=10
environment=PYTHONPATH="/app"
priority=200
startsecs=10
startretries=3
stopwaitsecs=600
killasgroup=true
stopasgroup=true

# Celery beat scheduler
[program:celery_beat]
command=celery -A app.celery beat --loglevel=info --schedule=/var/lib/celery/beat-schedule
directory=/app
user=app
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/celery_beat.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
stderr_logfile=/var/log/supervisor/celery_beat_error.log
stderr_logfile_maxbytes=50MB
stderr_logfile_backups=10
environment=PYTHONPATH="/app"
priority=300
startsecs=10
startretries=3
stopwaitsecs=60

# Celery flower (monitoring)
[program:celery_flower]
command=celery -A app.celery flower --port=5555 --basic_auth=admin:admin123
directory=/app
user=app
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/celery_flower.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
stderr_logfile=/var/log/supervisor/celery_flower_error.log
stderr_logfile_maxbytes=50MB
stderr_logfile_backups=10
environment=PYTHONPATH="/app"
priority=400
startsecs=10
startretries=3
stopwaitsecs=30

# Application health monitor
[program:health_monitor]
command=python -m app.utils.health_monitor
directory=/app
user=app
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/health_monitor.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=5
stderr_logfile=/var/log/supervisor/health_monitor_error.log
stderr_logfile_maxbytes=10MB
stderr_logfile_backups=5
environment=PYTHONPATH="/app"
priority=500
startsecs=5
startretries=3
stopwaitsecs=30

# Log rotation service
[program:log_rotator]
command=python -m app.utils.log_rotator
directory=/app
user=app
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/log_rotator.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3
stderr_logfile=/var/log/supervisor/log_rotator_error.log
stderr_logfile_maxbytes=10MB
stderr_logfile_backups=3
environment=PYTHONPATH="/app"
priority=600
startsecs=5
startretries=3
stopwaitsecs=30

# Group configuration for easy management
[group:app_services]
programs=flask_app,celery_worker,celery_beat
priority=100

[group:monitoring]
programs=celery_flower,health_monitor
priority=200

[group:maintenance]
programs=log_rotator
priority=300

# Event listener for process monitoring
[eventlistener:memmon]
command=memmon -a 400MB -m admin@example.com
events=PROCESS_STATE_RUNNING
buffer_size=10
stdout_logfile=/var/log/supervisor/memmon.log
stderr_logfile=/var/log/supervisor/memmon_error.log