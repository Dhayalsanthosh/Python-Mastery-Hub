# Python Mastery Hub - Continuous Deployment Pipeline
# Handles automated deployment to various environments

name: Continuous Deployment

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: "Skip test suite"
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Determine deployment environment and strategy
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy_web: ${{ steps.env.outputs.deploy_web }}
      deploy_api: ${{ steps.env.outputs.deploy_api }}
      deploy_docs: ${{ steps.env.outputs.deploy_docs }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

          echo "deploy_web=true" >> $GITHUB_OUTPUT
          echo "deploy_api=true" >> $GITHUB_OUTPUT
          echo "deploy_docs=true" >> $GITHUB_OUTPUT

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  # Pre-deployment tests (can be skipped manually)
  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_tests }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run critical tests
        run: poetry run pytest tests/ -v -m "not slow" --maxfail=5

      - name: Smoke test package import
        run: |
          poetry run python -c "
          from python_mastery_hub.core import get_module
          from python_mastery_hub.web.app import create_app
          print('✅ Core imports successful')
          "

  # Build and push Docker images
  build-images:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [setup, pre-deployment-tests]
    if: always() && (needs.pre-deployment-tests.result == 'success' || needs.pre-deployment-tests.result == 'skipped')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.setup.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # Deploy to Kubernetes/Cloud
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [setup, build-images]
    environment: ${{ needs.setup.outputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        working-directory: deployment/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ needs.setup.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}"

      - name: Terraform Plan
        working-directory: deployment/terraform
        run: |
          terraform plan \
            -var="environment=${{ needs.setup.outputs.environment }}" \
            -var="image_tag=${{ github.sha }}" \
            -var="app_version=${{ needs.setup.outputs.version }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: deployment/terraform
        run: terraform apply -auto-approve tfplan

      - name: Get infrastructure outputs
        id: terraform
        working-directory: deployment/terraform
        run: |
          echo "app_url=$(terraform output -raw app_url)" >> $GITHUB_OUTPUT
          echo "api_url=$(terraform output -raw api_url)" >> $GITHUB_OUTPUT

  # Deploy to Kubernetes
  deploy-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [setup, deploy-infrastructure]
    environment: ${{ needs.setup.outputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.2"

      - name: Setup Kubernetes context
        run: |
          aws eks update-kubeconfig \
            --region ${{ vars.AWS_REGION }} \
            --name python-mastery-hub-${{ needs.setup.outputs.environment }}

      - name: Deploy namespace and configs
        run: |
          kubectl apply -f deployment/kubernetes/namespace.yaml
          kubectl apply -f deployment/kubernetes/configmap.yaml \
            --namespace=python-mastery-hub-${{ needs.setup.outputs.environment }}

      - name: Update deployment image
        run: |
          kubectl set image deployment/python-mastery-hub-web \
            web=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --namespace=python-mastery-hub-${{ needs.setup.outputs.environment }}

          kubectl set image deployment/python-mastery-hub-api \
            api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --namespace=python-mastery-hub-${{ needs.setup.outputs.environment }}

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/python-mastery-hub-web \
            --namespace=python-mastery-hub-${{ needs.setup.outputs.environment }} \
            --timeout=300s

          kubectl rollout status deployment/python-mastery-hub-api \
            --namespace=python-mastery-hub-${{ needs.setup.outputs.environment }} \
            --timeout=300s

  # Deploy documentation
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [setup, pre-deployment-tests]
    if: needs.setup.outputs.deploy_docs == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build documentation
        run: |
          cd docs
          poetry run make html

      - name: Deploy to GitHub Pages
        if: needs.setup.outputs.environment == 'production'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

      - name: Deploy to S3 (staging)
        if: needs.setup.outputs.environment == 'staging'
        run: |
          aws s3 sync docs/_build/html/ \
            s3://${{ vars.DOCS_BUCKET_STAGING }}/ \
            --delete \
            --cache-control "max-age=300"

  # Post-deployment validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [setup, deploy-kubernetes, deploy-docs]

    steps:
      - uses: actions/checkout@v4

      - name: Health check - Web App
        run: |
          for i in {1..10}; do
            if curl -sf ${{ vars.APP_URL }}/health; then
              echo "✅ Web app health check passed"
              break
            fi
            echo "⏳ Waiting for web app... (attempt $i/10)"
            sleep 30
          done

      - name: Health check - API
        run: |
          for i in {1..10}; do
            if curl -sf ${{ vars.API_URL }}/health; then
              echo "✅ API health check passed"
              break
            fi
            echo "⏳ Waiting for API... (attempt $i/10)"
            sleep 30
          done

      - name: Run smoke tests
        run: |
          # Test critical user journeys
          curl -sf ${{ vars.APP_URL }}/modules
          curl -sf ${{ vars.API_URL }}/api/modules
          echo "✅ Smoke tests passed"

      - name: Performance check
        run: |
          response_time=$(curl -w "%{time_total}" -s -o /dev/null ${{ vars.APP_URL }})
          if (( $(echo "$response_time < 2.0" | bc -l) )); then
            echo "✅ Performance check passed: ${response_time}s"
          else
            echo "⚠️ Performance degraded: ${response_time}s"
            exit 1
          fi

  # Database migrations (if needed)
  migrate-database:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [setup, deploy-infrastructure]
    environment: ${{ needs.setup.outputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run database migrations
        run: |
          poetry run alembic upgrade head
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.event_name != 'workflow_dispatch'
    needs: [validate-deployment]

    steps:
      - uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Kubernetes context
        run: |
          aws eks update-kubeconfig \
            --region ${{ vars.AWS_REGION }} \
            --name python-mastery-hub-${{ needs.setup.outputs.environment }}

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/python-mastery-hub-web \
            --namespace=python-mastery-hub-${{ needs.setup.outputs.environment }}
          kubectl rollout undo deployment/python-mastery-hub-api \
            --namespace=python-mastery-hub-${{ needs.setup.outputs.environment }}

      - name: Notify rollback
        run: |
          echo "🔄 Deployment rolled back due to validation failure"

  # Notification and cleanup
  notify-completion:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [setup, validate-deployment, migrate-database]
    if: always()

    steps:
      - name: Deployment successful
        if: ${{ !contains(needs.*.result, 'failure') }}
        run: |
          echo "🚀 Deployment to ${{ needs.setup.outputs.environment }} completed successfully!"
          echo "📱 App URL: ${{ vars.APP_URL }}"
          echo "🔗 API URL: ${{ vars.API_URL }}"
          echo "📚 Docs URL: ${{ vars.DOCS_URL }}"

      - name: Deployment failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Deployment to ${{ needs.setup.outputs.environment }} failed!"
          echo "Please check the logs and consider manual intervention."

      - name: Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            Deployment to ${{ needs.setup.outputs.environment }} ${{ job.status }}
            Version: ${{ needs.setup.outputs.version }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
