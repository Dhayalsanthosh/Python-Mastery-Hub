# Python Mastery Hub - CodeQL Security Analysis
# Performs semantic code analysis to identify security vulnerabilities

name: "CodeQL Security Analysis"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly security scans on Sundays at 3 AM UTC
    - cron: "0 3 * * 0"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  analyze:
    name: Analyze Code
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["python", "javascript"]
        # CodeQL supports ['cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        if: matrix.language == 'python'
        uses: snok/install-poetry@v1
        with:
          version: "1.7.1"
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        if: matrix.language == 'python'
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: matrix.language == 'python' && steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        if: matrix.language == 'python'
        run: poetry install --no-interaction

      # Initialize CodeQL tools for scanning
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
          # Use custom query pack for enhanced security analysis
          config: |
            paths:
              - src
              - scripts
            paths-ignore:
              - tests
              - docs
              - deployment
              - monitoring
            queries:
              - uses: security-and-quality
              - uses: security-extended
            query-filters:
              - exclude:
                  id: py/unused-import
              - exclude:
                  id: js/unused-local-variable

      # For Python: Build project to help CodeQL understand dependencies
      - name: Build Python project
        if: matrix.language == 'python'
        run: |
          poetry run python -m pip install --upgrade pip
          poetry run python -c "
          try:
              import python_mastery_hub
              print('‚úÖ Package import successful')
          except ImportError as e:
              print(f'‚ö†Ô∏è Import warning: {e}')
          "

      # For JavaScript: Install Node.js dependencies
      - name: Setup Node.js
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "src/python_mastery_hub/web/static/package-lock.json"

      - name: Install JavaScript dependencies
        if: matrix.language == 'javascript'
        run: |
          cd src/python_mastery_hub/web/static
          npm ci --production

      # Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
          upload: true
          checkout_path: ${{ github.workspace }}

  # Custom security checks for Python-specific vulnerabilities
  python-security:
    name: Python Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.7.1"

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run Bandit security scan
        run: |
          poetry run bandit -r src/ -f json -o bandit-report.json || true
          poetry run bandit -r src/ -f txt

      - name: Run Safety dependency scan
        run: |
          poetry run safety check --json --output safety-report.json || true
          poetry run safety check

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/django
            p/flask
          generateSarif: "1"

      - name: Check for hardcoded secrets
        run: |
          echo "üîç Scanning for potential secrets..."

          # Check for common secret patterns
          grep -r -E "(password|passwd|pwd)\s*=\s*['\"][^'\"]+['\"]" src/ || echo "‚úÖ No hardcoded passwords found"
          grep -r -E "(api_key|apikey)\s*=\s*['\"][^'\"]+['\"]" src/ || echo "‚úÖ No hardcoded API keys found"  
          grep -r -E "(secret_key|secretkey)\s*=\s*['\"][^'\"]+['\"]" src/ || echo "‚úÖ No hardcoded secret keys found"
          grep -r -E "(token)\s*=\s*['\"][^'\"]+['\"]" src/ || echo "‚úÖ No hardcoded tokens found"

      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Web security scan for the Flask application
  web-security:
    name: Web Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security-scan]')

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.7.1"

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Start Flask application
        run: |
          poetry run python -m python_mastery_hub.web.main &
          sleep 10
        env:
          FLASK_ENV: testing
          REDIS_URL: redis://localhost:6379

      - name: Wait for application startup
        run: |
          for i in {1..30}; do
            if curl -sf http://localhost:5000/health; then
              echo "‚úÖ Application started successfully"
              break
            fi
            echo "‚è≥ Waiting for app startup... (attempt $i/30)"
            sleep 2
          done

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: "http://localhost:5000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

      - name: Check for security headers
        run: |
          echo "üîç Checking security headers..."

          response=$(curl -I http://localhost:5000)

          # Check for security headers
          if echo "$response" | grep -qi "x-content-type-options: nosniff"; then
            echo "‚úÖ X-Content-Type-Options header present"
          else
            echo "‚ö†Ô∏è X-Content-Type-Options header missing"
          fi

          if echo "$response" | grep -qi "x-frame-options"; then
            echo "‚úÖ X-Frame-Options header present" 
          else
            echo "‚ö†Ô∏è X-Frame-Options header missing"
          fi

          if echo "$response" | grep -qi "strict-transport-security"; then
            echo "‚úÖ HSTS header present"
          else
            echo "‚ö†Ô∏è HSTS header missing"
          fi

  # Dependency vulnerability scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=requirements.txt

      - name: Upload Snyk results to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  # Infrastructure security scan
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Checkov on Terraform
        uses: bridgecrewio/checkov-action@master
        with:
          directory: deployment/terraform
          framework: terraform
          output_format: sarif
          output_file_path: terraform-checkov.sarif

      - name: Run Checkov on Kubernetes
        uses: bridgecrewio/checkov-action@master
        with:
          directory: deployment/kubernetes
          framework: kubernetes
          output_format: sarif
          output_file_path: k8s-checkov.sarif

      - name: Run Checkov on Dockerfile
        uses: bridgecrewio/checkov-action@master
        with:
          file: Dockerfile
          framework: dockerfile
          output_format: sarif
          output_file_path: dockerfile-checkov.sarif

      - name: Upload Checkov results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: |
            terraform-checkov.sarif
            k8s-checkov.sarif
            dockerfile-checkov.sarif

  # Security report summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [analyze, python-security, dependency-scan, infrastructure-scan]
    if: always()

    steps:
      - name: Security scan completed
        run: |
          echo "üõ°Ô∏è Security Analysis Complete"
          echo "===================="
          echo "CodeQL Analysis: ${{ needs.analyze.result }}"
          echo "Python Security: ${{ needs.python-security.result }}"
          echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "Infrastructure: ${{ needs.infrastructure-scan.result }}"

          if [[ "${{ needs.analyze.result }}" == "failure" ]] || 
             [[ "${{ needs.python-security.result }}" == "failure" ]] ||
             [[ "${{ needs.dependency-scan.result }}" == "failure" ]] ||
             [[ "${{ needs.infrastructure-scan.result }}" == "failure" ]]; then
            echo "‚ùå Security issues detected. Please review the Security tab."
            exit 1
          else
            echo "‚úÖ No critical security issues detected."
          fi

      - name: Create security badge
        if: github.ref == 'refs/heads/main'
        run: |
          if [[ "${{ needs.analyze.result }}" == "success" ]] && 
             [[ "${{ needs.python-security.result }}" == "success" ]] &&
             [[ "${{ needs.dependency-scan.result }}" == "success" ]] &&
             [[ "${{ needs.infrastructure-scan.result }}" == "success" ]]; then
            echo "Security: Passing" > security-status.txt
          else
            echo "Security: Issues Found" > security-status.txt
          fi

      - name: Upload security status
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: security-status
          path: security-status.txt
