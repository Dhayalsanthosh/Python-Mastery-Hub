# File: deployment/kubernetes/deployment.yaml
# Kubernetes deployment configuration

apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-web
  namespace: myapp-production
  labels:
    app: myapp
    component: web
    version: v1.0.0
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Main web application deployment"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: myapp
      component: web
  template:
    metadata:
      labels:
        app: myapp
        component: web
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: myapp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: web
          image: myregistry.com/myapp:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          env:
            - name: FLASK_ENV
              value: "production"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: myapp-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: myapp-secrets
                  key: redis-url
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: myapp-secrets
                  key: secret-key
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: myapp-secrets
                  key: jwt-secret-key
          envFrom:
            - configMapRef:
                name: myapp-config
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          volumeMounts:
            - name: app-storage
              mountPath: /app/uploads
            - name: logs
              mountPath: /var/log/app
            - name: tmp
              mountPath: /tmp
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: app-storage
          persistentVolumeClaim:
            claimName: myapp-storage-pvc
        - name: logs
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      imagePullSecrets:
        - name: registry-secret
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
        - key: "app"
          operator: "Equal"
          value: "myapp"
          effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - myapp
                    - key: component
                      operator: In
                      values:
                        - web
                topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-worker
  namespace: myapp-production
  labels:
    app: myapp
    component: worker
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: myapp
      component: worker
  template:
    metadata:
      labels:
        app: myapp
        component: worker
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: myapp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: worker
          image: myregistry.com/myapp:latest
          imagePullPolicy: IfNotPresent
          command: ["celery"]
          args:
            - "-A"
            - "app.celery"
            - "worker"
            - "--loglevel=info"
            - "--concurrency=4"
          env:
            - name: FLASK_ENV
              value: "production"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: myapp-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: myapp-secrets
                  key: redis-url
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: myapp-secrets
                  key: secret-key
          envFrom:
            - configMapRef:
                name: myapp-config
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            exec:
              command:
                - celery
                - "-A"
                - "app.celery"
                - "inspect"
                - "ping"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          volumeMounts:
            - name: app-storage
              mountPath: /app/uploads
            - name: logs
              mountPath: /var/log/app
            - name: tmp
              mountPath: /tmp
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: app-storage
          persistentVolumeClaim:
            claimName: myapp-storage-pvc
        - name: logs
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      imagePullSecrets:
        - name: registry-secret

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-scheduler
  namespace: myapp-production
  labels:
    app: myapp
    component: scheduler
    version: v1.0.0
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: myapp
      component: scheduler
  template:
    metadata:
      labels:
        app: myapp
        component: scheduler
        version: v1.0.0
    spec:
      serviceAccountName: myapp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: scheduler
          image: myregistry.com/myapp:latest
          imagePullPolicy: IfNotPresent
          command: ["celery"]
          args:
            - "-A"
            - "app.celery"
            - "beat"
            - "--loglevel=info"
            - "--schedule=/var/lib/celery/beat-schedule"
          env:
            - name: FLASK_ENV
              value: "production"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: myapp-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: myapp-secrets
                  key: redis-url
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: myapp-secrets
                  key: secret-key
          envFrom:
            - configMapRef:
                name: myapp-config
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - name: celery-schedule
              mountPath: /var/lib/celery
            - name: logs
              mountPath: /var/log/app
            - name: tmp
              mountPath: /tmp
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: celery-schedule
          persistentVolumeClaim:
            claimName: myapp-celery-pvc
        - name: logs
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      imagePullSecrets:
        - name: registry-secret

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myapp-storage-pvc
  namespace: myapp-production
  labels:
    app: myapp
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myapp-celery-pvc
  namespace: myapp-production
  labels:
    app: myapp
    component: celery
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: myapp-service-account
  namespace: myapp-production
  labels:
    app: myapp
automountServiceAccountToken: false

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: myapp-web-pdb
  namespace: myapp-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: myapp
      component: web

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: myapp-worker-pdb
  namespace: myapp-production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: myapp
      component: worker

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: myapp-web-hpa
  namespace: myapp-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: myapp-web
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
